life_data[GEO == "Canada", unique(Element)]
life_data[, unique(.SD), by = c("REF_DATE")]
life_data[, unique(.SD), by = c("REF_DATE, GEO")]
life_data[, unique(.SD), by = c("REF_DATE", "GEO")]
life_data[, unique(.SD)]
life_data[, unique(`Age group`)]
life_data[, colnames()]
names(life_data)
dim(life_data)
life_data[, unique(SYMBOL)]
life_data[, unique(STATUS)]
life_data[, unique(TERMINATED)]
life_data[, unique(DECIMALS)]
# change column names
setnames(life_data, old = "Age group", new = "Age_group")
names(life_data)
life_data[, c("DGUID", "UOM", "UOM_ID", "SCALAR_FACTOR", "SCALAR_ID", "VECTOR", "COORDINATE", "STATUS", "SYMBOL", "TERMINATED", "DECIMALS") := NULL]
View(life_data)
life_data[, unique(Sex)]
names(life_data)
# clean values in each column
life_data[, Age_group := gsub(" years*", "", Age_group)]
View(life_data)
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub(" years*+", "", Age_group)]
# clean values in each column
life_data[, Age_group := gsub(" years*.", "", Age_group)]
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub(" years.*", "", Age_group)]
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub(" years.", "", Age_group)]
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub(" years.*", "", Age_group)]
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub(" years.*.", "", Age_group)]
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub("[:digit:].*", "", Age_group)]
life_data[, unique(Age_group)]
# clean values in each column
life_data[, Age_group := gsub("[[:digit:]].*", "", Age_group)]
life_data[, unique(Age_group)]
life_data <- fread("data/data_hackseq/13100114.csv", sep = ",")
metadata <- fread("data/data_hackseq/13100114_MetaData.csv", sep = ",")
names(life_data)
dim(life_data)
# change column names
setnames(life_data, old = "Age group", new = "Age_group")
# remove unimportant columns
life_data[, c("DGUID", "UOM", "UOM_ID", "SCALAR_FACTOR", "SCALAR_ID", "VECTOR", "COORDINATE", "STATUS", "SYMBOL", "TERMINATED", "DECIMALS") := NULL]
# clean values in each column
life_data[, Age_group := gsub("[[:digit:]].*", "", Age_group)]
life_data[, unique(Age_group)]
life_data <- fread("data/data_hackseq/13100114.csv", sep = ",")
metadata <- fread("data/data_hackseq/13100114_MetaData.csv", sep = ",")
# change column names
setnames(life_data, old = "Age group", new = "Age_group")
# remove unimportant columns
life_data[, c("DGUID", "UOM", "UOM_ID", "SCALAR_FACTOR", "SCALAR_ID", "VECTOR", "COORDINATE", "STATUS", "SYMBOL", "TERMINATED", "DECIMALS") := NULL]
# clean values in each column
life_data[, Age_group := gsub("[[:space:]].*", "", Age_group)]
life_data[, unique(Age_group)]
str(life_data)
life_data[, Sex := gsub("Males", "M", Sex)]
life_data[, Sex := gsub("Females", "F", Sex)]
life_data[, Sex := gsub("Both sexes", "Both", Sex)]
life_data[, unique(Sex)]
# change Value to numeric
life_data[, VALUE := as.numeric(VALUE)]
str(life_data)
# split REF_DATE column
life_data[, c("START_DATE", "END_DATE") := tstrsplit(REF_DATE, "/", fixed = T)]
View(life_data)
head(life_data)
life_data <- fread("data/data_hackseq/13100114.csv", sep = ",")
metadata <- fread("data/data_hackseq/13100114_MetaData.csv", sep = ",")
# change column names
setnames(life_data, old = "Age group", new = "Age_group")
# remove unimportant columns
life_data[, c("DGUID", "UOM", "UOM_ID", "SCALAR_FACTOR", "SCALAR_ID", "VECTOR", "COORDINATE", "STATUS", "SYMBOL", "TERMINATED", "DECIMALS") := NULL]
# clean values in each column
life_data[, Age_group := gsub("[[:space:]].*", "", Age_group)]
life_data[, Sex := gsub("Males", "M", Sex)]
life_data[, Sex := gsub("Females", "F", Sex)]
life_data[, Sex := gsub("Both sexes", "Both", Sex)]
# change Value to numeric
life_data[, VALUE := as.numeric(VALUE)]
# split REF_DATE column
life_data[, c("START_DATE", "END_DATE") := tstrsplit(REF_DATE, "/", fixed = T)]
head(life_data)
life_data <- fread("data/data_hackseq/13100114.csv", sep = ",")
metadata <- fread("data/data_hackseq/13100114_MetaData.csv", sep = ",")
# change column names
setnames(life_data, old = "Age group", new = "Age_group")
# remove unimportant columns
life_data[, c("DGUID", "UOM", "UOM_ID", "SCALAR_FACTOR", "SCALAR_ID", "VECTOR", "COORDINATE", "STATUS", "SYMBOL", "TERMINATED", "DECIMALS") := NULL]
# clean values in each column
life_data[, Age_group := gsub("[[:space:]].*", "", Age_group)]
life_data[, Sex := gsub("Males", "M", Sex)]
life_data[, Sex := gsub("Females", "F", Sex)]
life_data[, Sex := gsub("Both sexes", "Both", Sex)]
# change Value to numeric
life_data[, VALUE := as.numeric(VALUE)]
# split REF_DATE column
life_data[, c("START_YR", "END_YR") := tstrsplit(REF_DATE, "/", fixed = T)]
head(life_data)
seq(1980, 1982)
life_data[, unique(REF_DATE)]
?rep
dummy_dt <- data.table(YEAR = seq(1980, 1982))
View(dummy_dt)
dummy_dt <- seq(1980, 1982)
rep(dummy_dt, each = 2)
rep(dummy_dt, times = 2)
x <- head(life_data)
rep(x, each 2)
rep(x, each = 2)
y <- rep(x, each = 2)
View(y)
y <- data.table(rep(x, each = 2))
View(y)
x[, rep(.SD, each = 2)]
ref_date <- life_data[, unique(REF_DATE)]
create_sep_year <- function(ref_date, dt){
# create small table with the years
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[, rep(.SD, each = length(interval))]
big_dt <- rbind(dummy_dt, dt)
}
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
# create small table with the years
dt <- dt[REF_DATE == ref_date]
create_sep_year <- function(ref_date, dt){
# create small table with the years
dt <- dt[REF_DATE == ref_date]
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[, rep(.SD, each = length(interval))]
big_dt <- rbind(dummy_dt, dt)
}
ref_date <- life_data[, unique(REF_DATE)]
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
big_dt <- bind(dummy_dt, dt)
create_sep_year <- function(ref_date, dt){
# create small table with the years
dt <- dt[REF_DATE == ref_date]
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
# dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[, rep(.SD, each = length(interval))]
big_dt <- bind(dummy_dt, dt)
}
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
create_sep_year <- function(ref_date, dt){
# create small table with the years
dt <- dt[REF_DATE == ref_date]
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
# dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[, rep(.SD, each = length(interval))]
big_dt <- cbind(dummy_dt, dt)
}
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
x <- rbindlist(life_data_sep)
View(x)
View(life_data)
rep(y, each = 2)
y[, rep(row.names(y), each = 2)]
y[rep(seq_len(nrow(y)), each=2),]
z <- y[rep(seq_len(nrow(y)), each=2),]
View(z)
rm(z)
View(y)
y <- head(life_data)
View(y)
y[rep(1:.N, each = 3)]
create_sep_year <- function(ref_date, dt){
# create small table with the years
dt <- dt[REF_DATE == ref_date]
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
# dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[rep(1:.N, each = length(interval))]
big_dt <- cbind(dummy_dt, dt)
}
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
x <- rbindlist(life_data_sep)
nrow(x)/3
View(x)
life_data_sep <- rbindlist(life_data_sep)
create_sep_year <- function(ref_date, dt){
# create small table with the years
dt <- dt[REF_DATE == ref_date]
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
# dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[rep(1:.N, each = length(interval))]
big_dt <- cbind(interval, dt)
}
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
life_data_sep <- rbindlist(life_data_sep)
View(life_data_sep)
life_data_sep[, unique(interval)]
nrow(life_data_sep[interval == "1981"])
nrow(life_data_sep[interval == "1980"])
length(life_data_sep[, unique(Element)])
length(life_data_sep[, unique(Age_group)])
9*111*14
9*111*14*5
life_data[, .N, by = "GEO"]
life_data[, .N, by = c("GEO", "REF_DATE)"]
life_data[, .N, by = c("GEO", "REF_DATE")]
29970/2997
life_data[, .N, by = c("GEO", "REF_DATE", "Age_group")]
life_data[REF_DATE == "1980/1982", .N, by = c("GEO", "REF_DATE", "Age_group")]
nrow(life_data[REF_DATE == "1980/1982"])
rm(x, y, dummy_dt)
life_data <- fread("data/data_hackseq/13100114.csv", sep = ",")
metadata <- fread("data/data_hackseq/13100114_MetaData.csv", sep = ",")
names(life_data)
dim(life_data)
# change column names
setnames(life_data, old = "Age group", new = "Age_group")
# remove unimportant columns
life_data[, c("DGUID", "UOM", "UOM_ID", "SCALAR_FACTOR", "SCALAR_ID", "VECTOR", "COORDINATE", "STATUS", "SYMBOL", "TERMINATED", "DECIMALS") := NULL]
# clean values in each column
life_data[, Age_group := gsub("[[:space:]].*", "", Age_group)]
life_data[, Sex := gsub("Males", "M", Sex)]
life_data[, Sex := gsub("Females", "F", Sex)]
life_data[, Sex := gsub("Both sexes", "Both", Sex)]
# change Value to numeric
life_data[, VALUE := as.numeric(VALUE)]
# split REF_DATE column
life_data[, c("START_YR", "END_YR") := tstrsplit(REF_DATE, "/", fixed = T)]
head(life_data)
create_sep_year <- function(ref_date, dt){
# create small table with the years
dt <- dt[REF_DATE == ref_date]
interval <- seq(dt[, unique(START_YR)], dt[, unique(END_YR)])
# dummy_dt <- data.table(YEAR = rep(interval, times = nrow(dt)))
# create table with each row repeated for the number of years in one interval
dt <- dt[rep(1:.N, each = length(interval))]
big_dt <- cbind(interval, dt)
}
test <- head(life_data)
ref_date <- test[, unique(REF_DATE)]
test <- lapply(ref_date, create_sep_year, dt = test)
test <- rbindlist(test)
View(test)
test <- head(life_data)
ref_date <- test[, unique(REF_DATE)]
test2 <- lapply(ref_date, create_sep_year, dt = test)
test2 <- rbindlist(test)
test <- head(life_data)
ref_date <- test[, unique(REF_DATE)]
test2 <- lapply(ref_date, create_sep_year, dt = test)
test2 <- rbindlist(test2)
View(test2)
6*3
test <- tail(life_data)
ref_date <- test[, unique(REF_DATE)]
test2 <- lapply(ref_date, create_sep_year, dt = test)
test2 <- rbindlist(test2)
View(test2)
ref_date <- life_data[, unique(REF_DATE)]
# run function
life_data_sep <- lapply(ref_date, create_sep_year, dt = life_data)
life_data_sep <- rbindlist(life_data_sep)
rm(test*)
rm(test, test2)
names(life_data_sep)
# change column name
setnames(life_data_sep, old = "interval", new = "YEAR")
head(life_data_sep)
View(life_data_sep)
dim(life_data)
dim(life_data_sep)
names(life_data_sep)
3146850/3
names(life_data_sep)
life_data_sep[, AVG_VALUE = mean(VALUE), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
life_data_sep[, AVG_VALUE == mean(VALUE), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
life_data_sep[AVG_VALUE == mean(VALUE), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
life_data_sep[AVG_VALUE = mean(VALUE), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
life_data_sep[, .(AVG_VALUE = mean(VALUE)), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
life_data[,.N, by = c("GEO", "Age_group", "Sex", "Element")]
life_data[, length(unique(GEO))]
life_data[, length(unique(Age_group))]
life_data[, length(unique(Sex))]
life_data[, length(unique(Element))]
10*111*3*9*35
life_data_sep[, .(AVG_VALUE = mean(VALUE)), by = c("GEO", "Age_group", "Sex", "Element")]
names(life_data_sep)
life_data_sep[, .(AVG_VALUE = mean(VALUE)), by = c("YEAR", "GEO", "Age_group", "Sex", "Element"),
.SDcols = c("YEAR", "REF_DATE", "GEO", "Age_group", "Sex", "Element", "VALUE")]
life_data_sep[, .(AVG_VALUE = mean(VALUE)), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
names(life_data_sep)
life_data_sep[, unique(YEAR)]
life_data_sep[, length(unique(YEAR))]
37*9*3*111*10
life_data_sep_avg <- life_data_sep[, .(AVG_VALUE = mean(VALUE)), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")]
life_data_sep_avg[order(YEAR)]
life_data_sep_avg <- life_data_sep[, .(AVG_VALUE = mean(VALUE)), by = c("YEAR", "GEO", "Age_group", "Sex", "Element")][order(YEAR)]
View(life_data_sep_avg)
?write.table
?write.table
write.table(life_data_sep_avg, "results/life_data_sep_avg.csv", sep = ",")
View(life_data)
ref_date
View(life_data_sep)
head(life_data_sep_avg)
life_data_sep_avg[, unique(Element)]
write.table(life_data_sep_avg, "results/life_data_sep_avg.csv", sep = ",", row.names = F)
head(life_data_sep_avg)
library(data.table)
library(ggplot2)
life_data_sep_avg <- fread("results/life_data_sep_avg.csv", sep = ",")
View(life_data_sep_avg)
life_data_sep_avg[Element == "Number of survivors at age x (lx)"]
#
life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F")]
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F")],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
str(life_data_sep_avg)
#
life_data_sep_avg[Age_group := as.integer(Age_group)]
#
life_data_sep_avg[, Age_group := as.integer(Age_group)]
str(life_data_sep_avg)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F")],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F") & YEAR %in% c("1980", "2016")],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_line(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F") & YEAR %in% c(1980, 2016)],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_line(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_line(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
life_data_sep_avg[Element == "Number of survivors at age x (lx)" & Sex %in% c("M") & YEAR == 2016]
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016 & YEAR == 1980],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016 & YEAR == 1980],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016 & YEAR == 1980]
life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016 | YEAR == 1980]
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016 | YEAR == 1980],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016 | YEAR == 1980],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR = 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR = 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = YEAR)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ Sex)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR == 2016],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
install.packages("gganimate")
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% c(1980, 2016)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
seq(1980, 2016, 10)
?seq
seq(1980, 2016, 5)
seq(1980, 2016, 6)
seq(1980, 2016, 8)
seq(1980, 2016, 4)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw()
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(. ~ YEARs)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(. ~ YEAR)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ YEAR)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_grid(. ~ YEAR, ncol=2)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap( ~ YEAR, ncol = 2)
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(~ YEAR, ncol = 5)
# plot
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(~ YEAR, ncol = 5) +
scale_x_continuous(breaks=c(0, seq(10, 100, 10)), limits = c(0, 110))
# plot
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(~ YEAR, ncol = 5) +
scale_x_continuous(breaks=c(0, seq(10, 110, 10)), limits = c(0, 110))
seq(20000, 100000, 20000)
# plot
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(~ YEAR, ncol = 5) +
scale_x_continuous(breaks=c(0, seq(10, 110, 10)), limits = c(0, 110)) +
scale_y_continuous(breaks=c(0, seq(20000, 100000, 10000)))
# plot
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(~ YEAR, ncol = 5) +
scale_x_continuous(breaks=c(0, seq(10, 110, 10)), limits = c(0, 110)) +
scale_y_continuous(breaks=c(0, seq(10000, 100000, 10000)))
# plot
ggplot(life_data_sep_avg[Element == "Number of survivors at age x (lx)" & GEO == "British Columbia" & Sex %in% c("M", "F") & YEAR %in% seq(1980, 2016, 4)],
aes(x = Age_group, y = AVG_VALUE, color = Sex)) +
geom_point(alpha = 0.6, size = 2) +
theme_bw() +
facet_wrap(~ YEAR, ncol = 5) +
scale_x_continuous(breaks=c(0, seq(10, 110, 10)), limits = c(0, 110)) +
scale_y_continuous(breaks=c(0, seq(10000, 100000, 10000))) +
scale_color_discrete(name = "Sex",
labels = c("Female", "Male")) +
theme(legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 16), legend.position = "top",
axis.text = element_text(size = 16),
axis.title = element_text(size = 18,face = "bold")) +
xlab("Age") +
ylab("Number of survivors")
